'use strict';
var chai = require('chai');
var supertest = require('supertest');
var api = supertest('http://petstore.swagger.wordnik.com'); // supertest init;

chai.should();

require('dotenv').load();

describe('/pets', function() {
  describe('post', function() {
    it('should respond with 405 Invalid input', function(done) {
      api.post('/v2/pets')
      .set('Authorization', 'Bearer ' + process.env.PETSTORE_AUTH)
      .set('Accept', 'application/json')
      .send({
        body: 'DATA GOES HERE'
      })
      .expect(405)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

    it('should respond with 405 Invalid input', function(done) {
      api.post('/v2/pets')
      .set('Authorization', 'Bearer ' + process.env.PETSTORE_AUTH)
      .set('Accept', 'application/json')
      .send({
        body: 'DATA GOES HERE'
      })
      .expect(405)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

    it('should respond with 405 Invalid input', function(done) {
      api.post('/v2/pets')
      .set('Authorization', 'Bearer ' + process.env.PETSTORE_AUTH)
      .set('Accept', 'application/xml')
      .expect(405)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

    it('should respond with 405 Invalid input', function(done) {
      api.post('/v2/pets')
      .set('Authorization', 'Bearer ' + process.env.PETSTORE_AUTH)
      .set('Accept', 'application/xml')
      .expect(405)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

  });

  describe('put', function() {
    it('should respond with 400 Invalid ID supplied', function(done) {
      api.put('/v2/pets')
      .set('Authorization', 'Bearer ' + process.env.PETSTORE_AUTH)
      .set('Accept', 'application/json')
      .send({
        body: 'DATA GOES HERE'
      })
      .expect(400)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

    it('should respond with 400 Invalid ID supplied', function(done) {
      api.put('/v2/pets')
      .set('Authorization', 'Bearer ' + process.env.PETSTORE_AUTH)
      .set('Accept', 'application/json')
      .send({
        body: 'DATA GOES HERE'
      })
      .expect(400)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

    it('should respond with 400 Invalid ID supplied', function(done) {
      api.put('/v2/pets')
      .set('Authorization', 'Bearer ' + process.env.PETSTORE_AUTH)
      .set('Accept', 'application/xml')
      .expect(400)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

    it('should respond with 400 Invalid ID supplied', function(done) {
      api.put('/v2/pets')
      .set('Authorization', 'Bearer ' + process.env.PETSTORE_AUTH)
      .set('Accept', 'application/xml')
      .expect(400)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

    it('should respond with 404 Pet not found', function(done) {
      api.put('/v2/pets')
      .set('Authorization', 'Bearer ' + process.env.PETSTORE_AUTH)
      .set('Accept', 'application/json')
      .send({
        body: 'DATA GOES HERE'
      })
      .expect(404)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

    it('should respond with 404 Pet not found', function(done) {
      api.put('/v2/pets')
      .set('Authorization', 'Bearer ' + process.env.PETSTORE_AUTH)
      .set('Accept', 'application/json')
      .send({
        body: 'DATA GOES HERE'
      })
      .expect(404)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

    it('should respond with 404 Pet not found', function(done) {
      api.put('/v2/pets')
      .set('Authorization', 'Bearer ' + process.env.PETSTORE_AUTH)
      .set('Accept', 'application/xml')
      .expect(404)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

    it('should respond with 404 Pet not found', function(done) {
      api.put('/v2/pets')
      .set('Authorization', 'Bearer ' + process.env.PETSTORE_AUTH)
      .set('Accept', 'application/xml')
      .expect(404)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

    it('should respond with 405 Validation exception', function(done) {
      api.put('/v2/pets')
      .set('Authorization', 'Bearer ' + process.env.PETSTORE_AUTH)
      .set('Accept', 'application/json')
      .send({
        body: 'DATA GOES HERE'
      })
      .expect(405)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

    it('should respond with 405 Validation exception', function(done) {
      api.put('/v2/pets')
      .set('Authorization', 'Bearer ' + process.env.PETSTORE_AUTH)
      .set('Accept', 'application/json')
      .send({
        body: 'DATA GOES HERE'
      })
      .expect(405)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

    it('should respond with 405 Validation exception', function(done) {
      api.put('/v2/pets')
      .set('Authorization', 'Bearer ' + process.env.PETSTORE_AUTH)
      .set('Accept', 'application/xml')
      .expect(405)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

    it('should respond with 405 Validation exception', function(done) {
      api.put('/v2/pets')
      .set('Authorization', 'Bearer ' + process.env.PETSTORE_AUTH)
      .set('Accept', 'application/xml')
      .expect(405)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

  });

});
