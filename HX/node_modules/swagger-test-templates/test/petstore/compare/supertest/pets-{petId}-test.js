'use strict';
var chai = require('chai');
var ZSchema = require('z-schema');
var validator = new ZSchema({});
var supertest = require('supertest');
var api = supertest('http://petstore.swagger.wordnik.com'); // supertest init;

chai.should();

require('dotenv').load();

describe('/pets/{petId}', function() {
  describe('get', function() {
    it('should respond with 200 successful operation', function(done) {
      /*eslint-disable*/
      var schema = {
        "$ref": "#/definitions/Pet"
      };

      /*eslint-enable*/
      api.get('/v2/pets/' + properties.petId + '')
      .set('Accept', 'application/json')
      .set('api_key', process.env.API_KEY)
      .expect(200)
      .end(function(err, res) {
        if (err) return done(err);

        validator.validate(res.body, schema).should.be.true;
        done();
      });
    });

    it('should respond with 200 successful operation', function(done) {
      api.get('/v2/pets/' + properties.petId + '')
      .set('Accept', 'application/json')
      .set('api_key', process.env.API_KEY)
      .expect(200)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

    it('should respond with 400 Invalid ID supplied', function(done) {
      api.get('/v2/pets/' + properties.petId + '')
      .set('Accept', 'application/json')
      .set('api_key', process.env.API_KEY)
      .expect(400)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

    it('should respond with 400 Invalid ID supplied', function(done) {
      api.get('/v2/pets/' + properties.petId + '')
      .set('Accept', 'application/json')
      .set('api_key', process.env.API_KEY)
      .expect(400)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

    it('should respond with 404 Pet not found', function(done) {
      api.get('/v2/pets/' + properties.petId + '')
      .set('Accept', 'application/json')
      .set('api_key', process.env.API_KEY)
      .expect(404)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

    it('should respond with 404 Pet not found', function(done) {
      api.get('/v2/pets/' + properties.petId + '')
      .set('Accept', 'application/json')
      .set('api_key', process.env.API_KEY)
      .expect(404)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

  });

  describe('post', function() {
    it('should respond with 405 Invalid input', function(done) {
      api.post('/v2/pets/' + properties.petId + '')
      .set('Authorization', 'Bearer ' + process.env.PETSTORE_AUTH)
      .set('Accept', 'application/x-www-form-urlencoded')
      .send({
          name: 'DATA GOES HERE',
          status: 'DATA GOES HERE'
      })
      .expect(405)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

    it('should respond with 405 Invalid input', function(done) {
      api.post('/v2/pets/' + properties.petId + '')
      .set('Authorization', 'Bearer ' + process.env.PETSTORE_AUTH)
      .set('Accept', 'application/x-www-form-urlencoded')
      .send({
          name: 'DATA GOES HERE',
          status: 'DATA GOES HERE'
      })
      .expect(405)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

  });

  describe('delete', function() {
    it('should respond with 400 Invalid pet value', function(done) {
      api.del('/v2/pets/' + properties.petId + '')
      .set('Authorization', 'Bearer ' + process.env.PETSTORE_AUTH)
      .set('Accept', 'application/json')
      .set({
        api_key: 'DATA GOES HERE'
      })
      .expect(400)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

    it('should respond with 400 Invalid pet value', function(done) {
      api.del('/v2/pets/' + properties.petId + '')
      .set('Authorization', 'Bearer ' + process.env.PETSTORE_AUTH)
      .set('Accept', 'application/json')
      .set({
        api_key: 'DATA GOES HERE'
      })
      .expect(400)
      .end(function(err, res) {
        if (err) return done(err);

        res.body.should.equal(null); // non-json response or no schema
        done();
      });
    });

  });

});
